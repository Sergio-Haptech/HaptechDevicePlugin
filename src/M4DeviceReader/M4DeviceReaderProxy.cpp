/////////////////////////////////////
/////////////////////////////////////
/////////////////////////////////////
// WARNING
// This file has been autogenerated.
// Do NOT make modifications directly to it as they will be overwritten!
/////////////////////////////////////
/////////////////////////////////////
/////////////////////////////////////

#include "M4DeviceReaderProxy.h"
#include "M4DeviceReader.h"
#include <GUIAPI.h>
#include <MissionAPI.h>
#include <WeaponSystemAspectAPI.h>
#include <LogAPI.h>
#include <EnvironmentAPI.h>
#include <ObjectListenerAPI.h>
#include <WorldDrawAPI.h>
#include <WorldAPI.h>
#include <SoundAspectAPI.h>
#include <CommonTypesAPI.h>

GEARS_EXPORT void GEARS_API RegisterAPI_v6(APIManager_RegisterAPI_Func_v6 register_api)
{
  // Register ComponentAPI_v6
  {
    static ComponentAPI_v6 api;
    APIInfo_v6 api_info;

    api.Initialize = Component_Initialize;
    api.OnStart = Component_OnStart;
    api.OnStop = Component_OnStop;
    api.Shutdown = Component_Shutdown;
    api.IsParallelizable = Component_IsParallelizable;
    api.GetName = Component_GetName;
    api.GetVersion = Component_GetVersion;

    api_info._api = &api;
    api_info._version = 6;
    api_info._privilege = 0;

    register_api(ComponentAPI_Handle, &api_info);
  }

  // Register ApplicationListenerAPI_v2
  {
    static ApplicationListenerAPI_v2 api;
    APIInfo_v6 api_info;

    api.OnApplicationReady = ApplicationListener_OnApplicationReady;
    api.OnBeforeUpdate = ApplicationListener_OnBeforeUpdate;
    api.OnAfterUpdate = ApplicationListener_OnAfterUpdate;

    api_info._api = &api;
    api_info._version = 2;
    api_info._privilege = 0;

    register_api(ApplicationListenerAPI_Handle, &api_info);
  }

#ifdef DEBUG
  // Register ComponentReloadingListenerAPI_v1
  {
    static ComponentReloadingListenerAPI_v1 api;
    APIInfo_v6 api_info;

    api.BeforeUnload = ComponentReloadingListener_BeforeUnload;
    api.AfterReload = ComponentReloadingListener_AfterReload;

    api_info._api = &api;
    api_info._version = 1;
    api_info._privilege = 0;

    register_api(ComponentReloadingListenerAPI_Handle, &api_info);
  }
#endif

  // Register HaptechDeviceAPI_v1
  {
    static HaptechDeviceAPI_v1 api;
    APIInfo_v6 api_info;

    api.GetM4DeviceUsingStringAddress = HaptechDevice_GetM4DeviceUsingStringAddress;

    api_info._api = &api;
    api_info._version = 1;
    api_info._privilege = 0;

    register_api(HaptechDeviceAPI_Handle, &api_info);
  }

  // Register MissionListenerAPI_v4
  {
    static MissionListenerAPI_v4 api;
    APIInfo_v6 api_info;

    api.OnMissionStart = MissionListener_OnMissionStart;
    api.OnMissionEnd = MissionListener_OnMissionEnd;
    api.OnMissionLoad = MissionListener_OnMissionLoad;
    api.OnMissionUnload = MissionListener_OnMissionUnload;
    api.OnPlayerSwitchedUnits = MissionListener_OnPlayerSwitchedUnits;
    api.OnBriefingShowRequest = MissionListener_OnBriefingShowRequest;
    api.OnBriefingHideRequest = MissionListener_OnBriefingHideRequest;

    api_info._api = &api;
    api_info._version = 4;
    api_info._privilege = 0;

    register_api(MissionListenerAPI_Handle, &api_info);
  }

  // Register WeaponSystemAspectListenerAPI_v5
  {
    static WeaponSystemAspectListenerAPI_v5 api;
    APIInfo_v6 api_info;

    api.OnFire = WeaponSystemAspectListener_OnFire;
    api.OnAmmoHit = WeaponSystemAspectListener_OnAmmoHit;
    api.OnWeaponChanged = WeaponSystemAspectListener_OnWeaponChanged;
    api.OnMuzzleChanged = WeaponSystemAspectListener_OnMuzzleChanged;
    api.OnMagazineChanged = WeaponSystemAspectListener_OnMagazineChanged;
    api.OnWeaponAddedOrRemoved = WeaponSystemAspectListener_OnWeaponAddedOrRemoved;
    api.OnMagazineAddedOrRemoved = WeaponSystemAspectListener_OnMagazineAddedOrRemoved;
    api.OnIncomingLaser = WeaponSystemAspectListener_OnIncomingLaser;
    api.OnIncomingProjectile = WeaponSystemAspectListener_OnIncomingProjectile;

    api_info._api = &api;
    api_info._version = 5;
    api_info._privilege = 0;

    register_api(WeaponSystemAspectListenerAPI_Handle, &api_info);
  }
}
