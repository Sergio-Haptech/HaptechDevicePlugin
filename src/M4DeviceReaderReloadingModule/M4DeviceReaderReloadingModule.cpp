/////////////////////////////////////
/////////////////////////////////////
/////////////////////////////////////
// WARNING
// This file has been autogenerated.
// Do NOT make modifications directly to it as they will be overwritten!
/////////////////////////////////////
/////////////////////////////////////
/////////////////////////////////////

#include "M4DeviceReaderReloadingModule.h"
#include "M4DeviceReaderUnloadedPlaceholders.h"
#include <GUIAPI.h>
#include <MissionAPI.h>
#include <WeaponSystemAspectAPI.h>
#include <LogAPI.h>
#include <EnvironmentAPI.h>
#include <ObjectListenerAPI.h>
#include <WorldDrawAPI.h>
#include <WorldAPI.h>
#include <SoundAspectAPI.h>
#include <CommonTypesAPI.h>

HMODULE g_component_dll = nullptr;
APIResult g_load_result = kAPIResult_GeneralSuccess;
__declspec(align(32)) volatile uint32_t g_active_function_count = 0;

struct ImplementedAPIs
{
  ComponentAPI_v6 _component_v6;
  ApplicationListenerAPI_v2 _application_listener_v2;
  ComponentReloadingListenerAPI_v1 _component_reloading_listener_v1;
  HaptechDeviceAPI_v1 _haptech_device_v1;
  MissionListenerAPI_v4 _mission_listener_v4;
  WeaponSystemAspectListenerAPI_v5 _weapon_system_aspect_listener_v5;
};

ImplementedAPIs g_current_apis;
ImplementedAPIs g_implementation_apis;
ImplementedAPIs g_unloaded_apis;

GEARS_EXPORT void GEARS_API RegisterAPI_v6(APIManager_RegisterAPI_Func_v6 register_api)
{
  // Clear out the function pointers
  memset(&g_current_apis, 0, sizeof(g_current_apis));
  memset(&g_implementation_apis, 0, sizeof(g_implementation_apis));
  memset(&g_unloaded_apis, 0, sizeof(g_unloaded_apis));

  // Set up unloaded placeholder function pointers
  g_unloaded_apis._component_v6.Initialize = Unloaded_Component_Initialize;
  g_unloaded_apis._component_v6.OnStart = Unloaded_Component_OnStart;
  g_unloaded_apis._component_v6.OnStop = Unloaded_Component_OnStop;
  g_unloaded_apis._component_v6.Shutdown = Unloaded_Component_Shutdown;
  g_unloaded_apis._component_v6.IsParallelizable = Unloaded_Component_IsParallelizable;
  g_unloaded_apis._component_v6.GetName = Unloaded_Component_GetName;
  g_unloaded_apis._component_v6.GetVersion = Unloaded_Component_GetVersion;
  g_unloaded_apis._application_listener_v2.OnApplicationReady = Unloaded_ApplicationListener_OnApplicationReady;
  g_unloaded_apis._application_listener_v2.OnBeforeUpdate = Unloaded_ApplicationListener_OnBeforeUpdate;
  g_unloaded_apis._application_listener_v2.OnAfterUpdate = Unloaded_ApplicationListener_OnAfterUpdate;
  g_unloaded_apis._component_reloading_listener_v1.BeforeUnload = Unloaded_ComponentReloadingListener_BeforeUnload;
  g_unloaded_apis._component_reloading_listener_v1.AfterReload = Unloaded_ComponentReloadingListener_AfterReload;
  g_unloaded_apis._haptech_device_v1.GetM4DeviceUsingStringAddress = Unloaded_HaptechDevice_GetM4DeviceUsingStringAddress;
  g_unloaded_apis._mission_listener_v4.OnMissionStart = Unloaded_MissionListener_OnMissionStart;
  g_unloaded_apis._mission_listener_v4.OnMissionEnd = Unloaded_MissionListener_OnMissionEnd;
  g_unloaded_apis._mission_listener_v4.OnMissionLoad = Unloaded_MissionListener_OnMissionLoad;
  g_unloaded_apis._mission_listener_v4.OnMissionUnload = Unloaded_MissionListener_OnMissionUnload;
  g_unloaded_apis._mission_listener_v4.OnPlayerSwitchedUnits = Unloaded_MissionListener_OnPlayerSwitchedUnits;
  g_unloaded_apis._mission_listener_v4.OnBriefingShowRequest = Unloaded_MissionListener_OnBriefingShowRequest;
  g_unloaded_apis._mission_listener_v4.OnBriefingHideRequest = Unloaded_MissionListener_OnBriefingHideRequest;
  g_unloaded_apis._weapon_system_aspect_listener_v5.OnFire = Unloaded_WeaponSystemAspectListener_OnFire;
  g_unloaded_apis._weapon_system_aspect_listener_v5.OnAmmoHit = Unloaded_WeaponSystemAspectListener_OnAmmoHit;
  g_unloaded_apis._weapon_system_aspect_listener_v5.OnWeaponChanged = Unloaded_WeaponSystemAspectListener_OnWeaponChanged;
  g_unloaded_apis._weapon_system_aspect_listener_v5.OnMuzzleChanged = Unloaded_WeaponSystemAspectListener_OnMuzzleChanged;
  g_unloaded_apis._weapon_system_aspect_listener_v5.OnMagazineChanged = Unloaded_WeaponSystemAspectListener_OnMagazineChanged;
  g_unloaded_apis._weapon_system_aspect_listener_v5.OnWeaponAddedOrRemoved = Unloaded_WeaponSystemAspectListener_OnWeaponAddedOrRemoved;
  g_unloaded_apis._weapon_system_aspect_listener_v5.OnMagazineAddedOrRemoved = Unloaded_WeaponSystemAspectListener_OnMagazineAddedOrRemoved;
  g_unloaded_apis._weapon_system_aspect_listener_v5.OnIncomingLaser = Unloaded_WeaponSystemAspectListener_OnIncomingLaser;
  g_unloaded_apis._weapon_system_aspect_listener_v5.OnIncomingProjectile = Unloaded_WeaponSystemAspectListener_OnIncomingProjectile;

  // Point current functions to unloaded placeholders
  g_current_apis._component_v6 = g_unloaded_apis._component_v6;
  g_current_apis._application_listener_v2 = g_unloaded_apis._application_listener_v2;
  g_current_apis._component_reloading_listener_v1 = g_unloaded_apis._component_reloading_listener_v1;
  g_current_apis._haptech_device_v1 = g_unloaded_apis._haptech_device_v1;
  g_current_apis._mission_listener_v4 = g_unloaded_apis._mission_listener_v4;
  g_current_apis._weapon_system_aspect_listener_v5 = g_unloaded_apis._weapon_system_aspect_listener_v5;

  // Register ComponentAPI_v6
  {
    static ComponentAPI_v6 api;
    APIInfo_v6 api_info;

    api.Initialize = Wrapper_Component_Initialize;
    api.OnStart = Wrapper_Component_OnStart;
    api.OnStop = Wrapper_Component_OnStop;
    api.Shutdown = Wrapper_Component_Shutdown;
    api.IsParallelizable = Wrapper_Component_IsParallelizable;
    api.GetName = Wrapper_Component_GetName;
    api.GetVersion = Wrapper_Component_GetVersion;

    api_info._api = &api;
    api_info._version = 6;
    api_info._privilege = 0;

    register_api(ComponentAPI_Handle, &api_info);
  }

  // Register ApplicationListenerAPI_v2
  {
    static ApplicationListenerAPI_v2 api;
    APIInfo_v6 api_info;

    api.OnApplicationReady = Wrapper_ApplicationListener_OnApplicationReady;
    api.OnBeforeUpdate = Wrapper_ApplicationListener_OnBeforeUpdate;
    api.OnAfterUpdate = Wrapper_ApplicationListener_OnAfterUpdate;

    api_info._api = &api;
    api_info._version = 2;
    api_info._privilege = 0;

    register_api(ApplicationListenerAPI_Handle, &api_info);
  }

  // Register ComponentReloadingListenerAPI_v1
  {
    static ComponentReloadingListenerAPI_v1 api;
    APIInfo_v6 api_info;

    api.BeforeUnload = Wrapper_ComponentReloadingListener_BeforeUnload;
    api.AfterReload = Wrapper_ComponentReloadingListener_AfterReload;

    api_info._api = &api;
    api_info._version = 1;
    api_info._privilege = 0;

    register_api(ComponentReloadingListenerAPI_Handle, &api_info);
  }

  // Register HaptechDeviceAPI_v1
  {
    static HaptechDeviceAPI_v1 api;
    APIInfo_v6 api_info;

    api.GetM4DeviceUsingStringAddress = Wrapper_HaptechDevice_GetM4DeviceUsingStringAddress;

    api_info._api = &api;
    api_info._version = 1;
    api_info._privilege = 0;

    register_api(HaptechDeviceAPI_Handle, &api_info);
  }

  // Register MissionListenerAPI_v4
  {
    static MissionListenerAPI_v4 api;
    APIInfo_v6 api_info;

    api.OnMissionStart = Wrapper_MissionListener_OnMissionStart;
    api.OnMissionEnd = Wrapper_MissionListener_OnMissionEnd;
    api.OnMissionLoad = Wrapper_MissionListener_OnMissionLoad;
    api.OnMissionUnload = Wrapper_MissionListener_OnMissionUnload;
    api.OnPlayerSwitchedUnits = Wrapper_MissionListener_OnPlayerSwitchedUnits;
    api.OnBriefingShowRequest = Wrapper_MissionListener_OnBriefingShowRequest;
    api.OnBriefingHideRequest = Wrapper_MissionListener_OnBriefingHideRequest;

    api_info._api = &api;
    api_info._version = 4;
    api_info._privilege = 0;

    register_api(MissionListenerAPI_Handle, &api_info);
  }

  // Register WeaponSystemAspectListenerAPI_v5
  {
    static WeaponSystemAspectListenerAPI_v5 api;
    APIInfo_v6 api_info;

    api.OnFire = Wrapper_WeaponSystemAspectListener_OnFire;
    api.OnAmmoHit = Wrapper_WeaponSystemAspectListener_OnAmmoHit;
    api.OnWeaponChanged = Wrapper_WeaponSystemAspectListener_OnWeaponChanged;
    api.OnMuzzleChanged = Wrapper_WeaponSystemAspectListener_OnMuzzleChanged;
    api.OnMagazineChanged = Wrapper_WeaponSystemAspectListener_OnMagazineChanged;
    api.OnWeaponAddedOrRemoved = Wrapper_WeaponSystemAspectListener_OnWeaponAddedOrRemoved;
    api.OnMagazineAddedOrRemoved = Wrapper_WeaponSystemAspectListener_OnMagazineAddedOrRemoved;
    api.OnIncomingLaser = Wrapper_WeaponSystemAspectListener_OnIncomingLaser;
    api.OnIncomingProjectile = Wrapper_WeaponSystemAspectListener_OnIncomingProjectile;

    api_info._api = &api;
    api_info._version = 5;
    api_info._privilege = 0;

    register_api(WeaponSystemAspectListenerAPI_Handle, &api_info);
  }
}

void RegisterComponentAPI(const char* api_name, const APIInfo_v6* api_info)
{
  if(strcmp(api_name, ComponentAPI_Handle) == 0 && api_info->_version == 6)
  {
    g_implementation_apis._component_v6 = *reinterpret_cast<ComponentAPI_v6*>(api_info->_api);
  }
  else if(strcmp(api_name, ApplicationListenerAPI_Handle) == 0 && api_info->_version == 2)
  {
    g_implementation_apis._application_listener_v2 = *reinterpret_cast<ApplicationListenerAPI_v2*>(api_info->_api);
  }
  else if(strcmp(api_name, ComponentReloadingListenerAPI_Handle) == 0 && api_info->_version == 1)
  {
    g_implementation_apis._component_reloading_listener_v1 = *reinterpret_cast<ComponentReloadingListenerAPI_v1*>(api_info->_api);
  }
  else if(strcmp(api_name, HaptechDeviceAPI_Handle) == 0 && api_info->_version == 1)
  {
    g_implementation_apis._haptech_device_v1 = *reinterpret_cast<HaptechDeviceAPI_v1*>(api_info->_api);
  }
  else if(strcmp(api_name, MissionListenerAPI_Handle) == 0 && api_info->_version == 4)
  {
    g_implementation_apis._mission_listener_v4 = *reinterpret_cast<MissionListenerAPI_v4*>(api_info->_api);
  }
  else if(strcmp(api_name, WeaponSystemAspectListenerAPI_Handle) == 0 && api_info->_version == 5)
  {
    g_implementation_apis._weapon_system_aspect_listener_v5 = *reinterpret_cast<WeaponSystemAspectListenerAPI_v5*>(api_info->_api);
  }
  else
  {
    g_load_result = kAPIResult_ReloadError_UnexpectedAPI;
  }
}

GEARS_EXPORT APIResult GEARS_API Wrapper_Component_LoadComponent(_In_ HMODULE component_dll)
{
  // Clear implementation pointers
  memset(&g_implementation_apis, 0, sizeof(g_implementation_apis));

  // Check if its already loaded
  if(g_component_dll != nullptr)
  {
    return kAPIResult_GeneralError;
  }

  g_load_result = kAPIResult_GeneralSuccess;
  g_component_dll = component_dll;

  if(g_component_dll != nullptr)
  {
    // Get the register function
    typedef void (GEARS_API *RegisterFunc)(APIManager_RegisterAPI_Func_v6);
    RegisterFunc register_func = (RegisterFunc)GetProcAddress(g_component_dll, "RegisterAPI_v6");
    if(register_func != nullptr)
    {
      register_func(RegisterComponentAPI);
    }
    else
    {
      g_load_result = kAPIResult_ReloadError_MissingFunction;
    }

    if(APIRESULT_SUCCESS(g_load_result) == false)
    {
      // Clear implementation pointers
      memset(&g_implementation_apis, 0, sizeof(g_implementation_apis));

      // Unload dll
      FreeLibrary(g_component_dll);
      g_component_dll = nullptr;
    }
  }
  else
  {
    g_load_result = kAPIResult_ReloadError_DLLFailedToLoad;
  }

  return g_load_result;
}

APIResult GEARS_API Wrapper_Component_Initialize(_In_ const char* component_folder)
{
  APIResult return_value;
  if(g_implementation_apis._component_v6.Initialize != nullptr)
  {
    // Forward to implementation
    InterlockedIncrement(&g_active_function_count);
    return_value = g_implementation_apis._component_v6.Initialize(component_folder);
    InterlockedDecrement(&g_active_function_count);
  }
  else
  {
    // Forward to unloaded placeholder
    return_value = g_unloaded_apis._component_v6.Initialize(component_folder);
  }

  // Point current functions to implementation
  g_current_apis._component_v6 = g_implementation_apis._component_v6;
  g_current_apis._application_listener_v2 = g_implementation_apis._application_listener_v2;
  g_current_apis._component_reloading_listener_v1 = g_implementation_apis._component_reloading_listener_v1;
  g_current_apis._haptech_device_v1 = g_implementation_apis._haptech_device_v1;
  g_current_apis._mission_listener_v4 = g_implementation_apis._mission_listener_v4;
  g_current_apis._weapon_system_aspect_listener_v5 = g_implementation_apis._weapon_system_aspect_listener_v5;
  return return_value;
}

APIResult GEARS_API Wrapper_Component_OnStart(_In_ APIManager_v6* api_manager, _In_ NativeModuleHandle proxy_handle)
{
  APIResult return_value;
  if(g_current_apis._component_v6.OnStart == g_implementation_apis._component_v6.OnStart)
  {
    // Forward to implementation
    InterlockedIncrement(&g_active_function_count);
    return_value = g_current_apis._component_v6.OnStart(api_manager, proxy_handle);
    InterlockedDecrement(&g_active_function_count);
  }
  else
  {
    // Forward to unloaded placeholder
    return_value = g_unloaded_apis._component_v6.OnStart(api_manager, proxy_handle);
  }
  return return_value;
}

APIResult GEARS_API Wrapper_Component_OnStop()
{
  APIResult return_value;
  if(g_current_apis._component_v6.OnStop == g_implementation_apis._component_v6.OnStop)
  {
    // Forward to implementation
    InterlockedIncrement(&g_active_function_count);
    return_value = g_current_apis._component_v6.OnStop();
    InterlockedDecrement(&g_active_function_count);
  }
  else
  {
    // Forward to unloaded placeholder
    return_value = g_unloaded_apis._component_v6.OnStop();
  }
  return return_value;
}

APIResult GEARS_API Wrapper_Component_Shutdown()
{
  // Point current functions to unloaded placeholders
  g_current_apis._component_v6 = g_unloaded_apis._component_v6;
  g_current_apis._application_listener_v2 = g_unloaded_apis._application_listener_v2;
  g_current_apis._component_reloading_listener_v1 = g_unloaded_apis._component_reloading_listener_v1;
  g_current_apis._haptech_device_v1 = g_unloaded_apis._haptech_device_v1;
  g_current_apis._mission_listener_v4 = g_unloaded_apis._mission_listener_v4;
  g_current_apis._weapon_system_aspect_listener_v5 = g_unloaded_apis._weapon_system_aspect_listener_v5;

  // Wait for any current API calls to finish
  while(InterlockedCompareExchange(&g_active_function_count, 0, 0) != 0)
  {
  }

  APIResult return_value;
  if(g_implementation_apis._component_v6.Shutdown != nullptr)
  {
    // Forward to implementation
    InterlockedIncrement(&g_active_function_count);
    return_value = g_implementation_apis._component_v6.Shutdown();
    InterlockedDecrement(&g_active_function_count);
  }
  else
  {
    // Forward to unloaded placeholder
    return_value = g_unloaded_apis._component_v6.Shutdown();
  }

  // Clear implementation pointers
  memset(&g_implementation_apis, 0, sizeof(g_implementation_apis));

  // Unload dll
  FreeLibrary(g_component_dll);
  g_component_dll = nullptr;

  return return_value;
}

APIResult GEARS_API Wrapper_Component_IsParallelizable(_Out_ bool32_t* parallelizable)
{
  APIResult return_value;
  if(g_current_apis._component_v6.IsParallelizable == g_implementation_apis._component_v6.IsParallelizable)
  {
    // Forward to implementation
    InterlockedIncrement(&g_active_function_count);
    return_value = g_current_apis._component_v6.IsParallelizable(parallelizable);
    InterlockedDecrement(&g_active_function_count);
  }
  else
  {
    // Forward to unloaded placeholder
    return_value = g_unloaded_apis._component_v6.IsParallelizable(parallelizable);
  }
  return return_value;
}

APIResult GEARS_API Wrapper_Component_GetName(_Inout_ int32_t* name_length, _Out_opt_ char* name)
{
  APIResult return_value;
  if(g_current_apis._component_v6.GetName == g_implementation_apis._component_v6.GetName)
  {
    // Forward to implementation
    InterlockedIncrement(&g_active_function_count);
    return_value = g_current_apis._component_v6.GetName(name_length, name);
    InterlockedDecrement(&g_active_function_count);
  }
  else
  {
    // Forward to unloaded placeholder
    return_value = g_unloaded_apis._component_v6.GetName(name_length, name);
  }
  return return_value;
}

APIResult GEARS_API Wrapper_Component_GetVersion(_Inout_ int32_t* version_length, _Out_opt_ char* version)
{
  APIResult return_value;
  if(g_current_apis._component_v6.GetVersion == g_implementation_apis._component_v6.GetVersion)
  {
    // Forward to implementation
    InterlockedIncrement(&g_active_function_count);
    return_value = g_current_apis._component_v6.GetVersion(version_length, version);
    InterlockedDecrement(&g_active_function_count);
  }
  else
  {
    // Forward to unloaded placeholder
    return_value = g_unloaded_apis._component_v6.GetVersion(version_length, version);
  }
  return return_value;
}

void GEARS_API Wrapper_ApplicationListener_OnApplicationReady()
{
  if(g_current_apis._application_listener_v2.OnApplicationReady == g_implementation_apis._application_listener_v2.OnApplicationReady)
  {
    // Forward to implementation
    InterlockedIncrement(&g_active_function_count);
    g_current_apis._application_listener_v2.OnApplicationReady();
    InterlockedDecrement(&g_active_function_count);
  }
  else
  {
    // Forward to unloaded placeholder
    g_unloaded_apis._application_listener_v2.OnApplicationReady();
  }
}

void GEARS_API Wrapper_ApplicationListener_OnBeforeUpdate(_In_ float32_t application_delta_time, _In_ float32_t simulation_delta_time)
{
  if(g_current_apis._application_listener_v2.OnBeforeUpdate == g_implementation_apis._application_listener_v2.OnBeforeUpdate)
  {
    // Forward to implementation
    InterlockedIncrement(&g_active_function_count);
    g_current_apis._application_listener_v2.OnBeforeUpdate(application_delta_time, simulation_delta_time);
    InterlockedDecrement(&g_active_function_count);
  }
  else
  {
    // Forward to unloaded placeholder
    g_unloaded_apis._application_listener_v2.OnBeforeUpdate(application_delta_time, simulation_delta_time);
  }
}

void GEARS_API Wrapper_ApplicationListener_OnAfterUpdate(_In_ float32_t application_delta_time, _In_ float32_t simulation_delta_time)
{
  if(g_current_apis._application_listener_v2.OnAfterUpdate == g_implementation_apis._application_listener_v2.OnAfterUpdate)
  {
    // Forward to implementation
    InterlockedIncrement(&g_active_function_count);
    g_current_apis._application_listener_v2.OnAfterUpdate(application_delta_time, simulation_delta_time);
    InterlockedDecrement(&g_active_function_count);
  }
  else
  {
    // Forward to unloaded placeholder
    g_unloaded_apis._application_listener_v2.OnAfterUpdate(application_delta_time, simulation_delta_time);
  }
}

APIResult GEARS_API Wrapper_ComponentReloadingListener_BeforeUnload()
{
  APIResult return_value;
  if(g_current_apis._component_reloading_listener_v1.BeforeUnload == g_implementation_apis._component_reloading_listener_v1.BeforeUnload)
  {
    // Forward to implementation
    InterlockedIncrement(&g_active_function_count);
    return_value = g_current_apis._component_reloading_listener_v1.BeforeUnload();
    InterlockedDecrement(&g_active_function_count);
  }
  else
  {
    // Forward to unloaded placeholder
    return_value = g_unloaded_apis._component_reloading_listener_v1.BeforeUnload();
  }
  return return_value;
}

APIResult GEARS_API Wrapper_ComponentReloadingListener_AfterReload(_In_ const char* component_folder)
{
  APIResult return_value;
  if(g_current_apis._component_reloading_listener_v1.AfterReload == g_implementation_apis._component_reloading_listener_v1.AfterReload)
  {
    // Forward to implementation
    InterlockedIncrement(&g_active_function_count);
    return_value = g_current_apis._component_reloading_listener_v1.AfterReload(component_folder);
    InterlockedDecrement(&g_active_function_count);
  }
  else
  {
    // Forward to unloaded placeholder
    return_value = g_unloaded_apis._component_reloading_listener_v1.AfterReload(component_folder);
  }
  return return_value;
}

APIResult GEARS_API Wrapper_HaptechDevice_GetM4DeviceUsingStringAddress(_Out_ void* device)
{
  APIResult return_value;
  if(g_current_apis._haptech_device_v1.GetM4DeviceUsingStringAddress == g_implementation_apis._haptech_device_v1.GetM4DeviceUsingStringAddress)
  {
    // Forward to implementation
    InterlockedIncrement(&g_active_function_count);
    return_value = g_current_apis._haptech_device_v1.GetM4DeviceUsingStringAddress(device);
    InterlockedDecrement(&g_active_function_count);
  }
  else
  {
    // Forward to unloaded placeholder
    return_value = g_unloaded_apis._haptech_device_v1.GetM4DeviceUsingStringAddress(device);
  }
  return return_value;
}

void GEARS_API Wrapper_MissionListener_OnMissionStart(_In_ bool32_t restart)
{
  if(g_current_apis._mission_listener_v4.OnMissionStart == g_implementation_apis._mission_listener_v4.OnMissionStart)
  {
    // Forward to implementation
    InterlockedIncrement(&g_active_function_count);
    g_current_apis._mission_listener_v4.OnMissionStart(restart);
    InterlockedDecrement(&g_active_function_count);
  }
  else
  {
    // Forward to unloaded placeholder
    g_unloaded_apis._mission_listener_v4.OnMissionStart(restart);
  }
}

void GEARS_API Wrapper_MissionListener_OnMissionEnd(_In_ bool32_t restart)
{
  if(g_current_apis._mission_listener_v4.OnMissionEnd == g_implementation_apis._mission_listener_v4.OnMissionEnd)
  {
    // Forward to implementation
    InterlockedIncrement(&g_active_function_count);
    g_current_apis._mission_listener_v4.OnMissionEnd(restart);
    InterlockedDecrement(&g_active_function_count);
  }
  else
  {
    // Forward to unloaded placeholder
    g_unloaded_apis._mission_listener_v4.OnMissionEnd(restart);
  }
}

void GEARS_API Wrapper_MissionListener_OnMissionLoad(_In_ const char* mission_name)
{
  if(g_current_apis._mission_listener_v4.OnMissionLoad == g_implementation_apis._mission_listener_v4.OnMissionLoad)
  {
    // Forward to implementation
    InterlockedIncrement(&g_active_function_count);
    g_current_apis._mission_listener_v4.OnMissionLoad(mission_name);
    InterlockedDecrement(&g_active_function_count);
  }
  else
  {
    // Forward to unloaded placeholder
    g_unloaded_apis._mission_listener_v4.OnMissionLoad(mission_name);
  }
}

void GEARS_API Wrapper_MissionListener_OnMissionUnload(_In_ const char* mission_name)
{
  if(g_current_apis._mission_listener_v4.OnMissionUnload == g_implementation_apis._mission_listener_v4.OnMissionUnload)
  {
    // Forward to implementation
    InterlockedIncrement(&g_active_function_count);
    g_current_apis._mission_listener_v4.OnMissionUnload(mission_name);
    InterlockedDecrement(&g_active_function_count);
  }
  else
  {
    // Forward to unloaded placeholder
    g_unloaded_apis._mission_listener_v4.OnMissionUnload(mission_name);
  }
}

void GEARS_API Wrapper_MissionListener_OnPlayerSwitchedUnits(_In_ ObjectHandle_v3 old_entity, _In_ ObjectHandle_v3 new_entity)
{
  if(g_current_apis._mission_listener_v4.OnPlayerSwitchedUnits == g_implementation_apis._mission_listener_v4.OnPlayerSwitchedUnits)
  {
    // Forward to implementation
    InterlockedIncrement(&g_active_function_count);
    g_current_apis._mission_listener_v4.OnPlayerSwitchedUnits(old_entity, new_entity);
    InterlockedDecrement(&g_active_function_count);
  }
  else
  {
    // Forward to unloaded placeholder
    g_unloaded_apis._mission_listener_v4.OnPlayerSwitchedUnits(old_entity, new_entity);
  }
}

void GEARS_API Wrapper_MissionListener_OnBriefingShowRequest()
{
  if(g_current_apis._mission_listener_v4.OnBriefingShowRequest == g_implementation_apis._mission_listener_v4.OnBriefingShowRequest)
  {
    // Forward to implementation
    InterlockedIncrement(&g_active_function_count);
    g_current_apis._mission_listener_v4.OnBriefingShowRequest();
    InterlockedDecrement(&g_active_function_count);
  }
  else
  {
    // Forward to unloaded placeholder
    g_unloaded_apis._mission_listener_v4.OnBriefingShowRequest();
  }
}

void GEARS_API Wrapper_MissionListener_OnBriefingHideRequest()
{
  if(g_current_apis._mission_listener_v4.OnBriefingHideRequest == g_implementation_apis._mission_listener_v4.OnBriefingHideRequest)
  {
    // Forward to implementation
    InterlockedIncrement(&g_active_function_count);
    g_current_apis._mission_listener_v4.OnBriefingHideRequest();
    InterlockedDecrement(&g_active_function_count);
  }
  else
  {
    // Forward to unloaded placeholder
    g_unloaded_apis._mission_listener_v4.OnBriefingHideRequest();
  }
}

void GEARS_API Wrapper_WeaponSystemAspectListener_OnFire(_In_ ObjectHandle_v3 shooter_lifeform, _In_ ObjectHandle_v3 shooter_platform, _In_ ObjectHandle_v3 shooter_turret, _In_ ObjectHandle_v3 shot)
{
  if(g_current_apis._weapon_system_aspect_listener_v5.OnFire == g_implementation_apis._weapon_system_aspect_listener_v5.OnFire)
  {
    // Forward to implementation
    InterlockedIncrement(&g_active_function_count);
    g_current_apis._weapon_system_aspect_listener_v5.OnFire(shooter_lifeform, shooter_platform, shooter_turret, shot);
    InterlockedDecrement(&g_active_function_count);
  }
  else
  {
    // Forward to unloaded placeholder
    g_unloaded_apis._weapon_system_aspect_listener_v5.OnFire(shooter_lifeform, shooter_platform, shooter_turret, shot);
  }
}

void GEARS_API Wrapper_WeaponSystemAspectListener_OnAmmoHit(_In_ const HitEvent_v3* hit_info)
{
  if(g_current_apis._weapon_system_aspect_listener_v5.OnAmmoHit == g_implementation_apis._weapon_system_aspect_listener_v5.OnAmmoHit)
  {
    // Forward to implementation
    InterlockedIncrement(&g_active_function_count);
    g_current_apis._weapon_system_aspect_listener_v5.OnAmmoHit(hit_info);
    InterlockedDecrement(&g_active_function_count);
  }
  else
  {
    // Forward to unloaded placeholder
    g_unloaded_apis._weapon_system_aspect_listener_v5.OnAmmoHit(hit_info);
  }
}

void GEARS_API Wrapper_WeaponSystemAspectListener_OnWeaponChanged(_In_ ObjectHandle_v3 weapon_system_owner, _In_ int32_t previous_weapon_index, _In_ int32_t new_weapon_index)
{
  if(g_current_apis._weapon_system_aspect_listener_v5.OnWeaponChanged == g_implementation_apis._weapon_system_aspect_listener_v5.OnWeaponChanged)
  {
    // Forward to implementation
    InterlockedIncrement(&g_active_function_count);
    g_current_apis._weapon_system_aspect_listener_v5.OnWeaponChanged(weapon_system_owner, previous_weapon_index, new_weapon_index);
    InterlockedDecrement(&g_active_function_count);
  }
  else
  {
    // Forward to unloaded placeholder
    g_unloaded_apis._weapon_system_aspect_listener_v5.OnWeaponChanged(weapon_system_owner, previous_weapon_index, new_weapon_index);
  }
}

void GEARS_API Wrapper_WeaponSystemAspectListener_OnMuzzleChanged(_In_ ObjectHandle_v3 weapon_system_owner, _In_ int32_t weapon_index, _In_ int32_t previous_muzzle_index, _In_ int32_t new_muzzle_index)
{
  if(g_current_apis._weapon_system_aspect_listener_v5.OnMuzzleChanged == g_implementation_apis._weapon_system_aspect_listener_v5.OnMuzzleChanged)
  {
    // Forward to implementation
    InterlockedIncrement(&g_active_function_count);
    g_current_apis._weapon_system_aspect_listener_v5.OnMuzzleChanged(weapon_system_owner, weapon_index, previous_muzzle_index, new_muzzle_index);
    InterlockedDecrement(&g_active_function_count);
  }
  else
  {
    // Forward to unloaded placeholder
    g_unloaded_apis._weapon_system_aspect_listener_v5.OnMuzzleChanged(weapon_system_owner, weapon_index, previous_muzzle_index, new_muzzle_index);
  }
}

void GEARS_API Wrapper_WeaponSystemAspectListener_OnMagazineChanged(_In_ ObjectHandle_v3 weapon_system_owner, _In_ int32_t weapon_index, _In_ int32_t previous_magazine_index, _In_ int32_t new_magazine_index)
{
  if(g_current_apis._weapon_system_aspect_listener_v5.OnMagazineChanged == g_implementation_apis._weapon_system_aspect_listener_v5.OnMagazineChanged)
  {
    // Forward to implementation
    InterlockedIncrement(&g_active_function_count);
    g_current_apis._weapon_system_aspect_listener_v5.OnMagazineChanged(weapon_system_owner, weapon_index, previous_magazine_index, new_magazine_index);
    InterlockedDecrement(&g_active_function_count);
  }
  else
  {
    // Forward to unloaded placeholder
    g_unloaded_apis._weapon_system_aspect_listener_v5.OnMagazineChanged(weapon_system_owner, weapon_index, previous_magazine_index, new_magazine_index);
  }
}

void GEARS_API Wrapper_WeaponSystemAspectListener_OnWeaponAddedOrRemoved(_In_ ObjectHandle_v3 weapon_system_owner, _In_ const char* weapon_name, _In_ int32_t count)
{
  if(g_current_apis._weapon_system_aspect_listener_v5.OnWeaponAddedOrRemoved == g_implementation_apis._weapon_system_aspect_listener_v5.OnWeaponAddedOrRemoved)
  {
    // Forward to implementation
    InterlockedIncrement(&g_active_function_count);
    g_current_apis._weapon_system_aspect_listener_v5.OnWeaponAddedOrRemoved(weapon_system_owner, weapon_name, count);
    InterlockedDecrement(&g_active_function_count);
  }
  else
  {
    // Forward to unloaded placeholder
    g_unloaded_apis._weapon_system_aspect_listener_v5.OnWeaponAddedOrRemoved(weapon_system_owner, weapon_name, count);
  }
}

void GEARS_API Wrapper_WeaponSystemAspectListener_OnMagazineAddedOrRemoved(_In_ ObjectHandle_v3 weapon_system_owner, _In_ const char* magazine_name, _In_ int32_t count)
{
  if(g_current_apis._weapon_system_aspect_listener_v5.OnMagazineAddedOrRemoved == g_implementation_apis._weapon_system_aspect_listener_v5.OnMagazineAddedOrRemoved)
  {
    // Forward to implementation
    InterlockedIncrement(&g_active_function_count);
    g_current_apis._weapon_system_aspect_listener_v5.OnMagazineAddedOrRemoved(weapon_system_owner, magazine_name, count);
    InterlockedDecrement(&g_active_function_count);
  }
  else
  {
    // Forward to unloaded placeholder
    g_unloaded_apis._weapon_system_aspect_listener_v5.OnMagazineAddedOrRemoved(weapon_system_owner, magazine_name, count);
  }
}

void GEARS_API Wrapper_WeaponSystemAspectListener_OnIncomingLaser(_In_ ObjectHandle_v3 lased_object, _In_ ObjectHandle_v3 laser_source, _In_ LaserType_v5 laser_type, _In_ int64_t lase_event_id, _In_ bool32_t end_of_lase_event, _In_ RotationalAngles_v3 laser_direction, _In_ GeoPosition_v5 laser_position, _In_ float32_t laser_cone_angle)
{
  if(g_current_apis._weapon_system_aspect_listener_v5.OnIncomingLaser == g_implementation_apis._weapon_system_aspect_listener_v5.OnIncomingLaser)
  {
    // Forward to implementation
    InterlockedIncrement(&g_active_function_count);
    g_current_apis._weapon_system_aspect_listener_v5.OnIncomingLaser(lased_object, laser_source, laser_type, lase_event_id, end_of_lase_event, laser_direction, laser_position, laser_cone_angle);
    InterlockedDecrement(&g_active_function_count);
  }
  else
  {
    // Forward to unloaded placeholder
    g_unloaded_apis._weapon_system_aspect_listener_v5.OnIncomingLaser(lased_object, laser_source, laser_type, lase_event_id, end_of_lase_event, laser_direction, laser_position, laser_cone_angle);
  }
}

void GEARS_API Wrapper_WeaponSystemAspectListener_OnIncomingProjectile(_In_ ObjectHandle_v3 object, _In_ ObjectHandle_v3 projectile, _In_ float32_t distance, _In_ GeoPosition_v5 projectile_position, _In_ Vector3f32_v3 projectile_velocity, _In_ ObjectHandle_v3 shooter, _In_ bool32_t can_damage, _In_ GeoPosition_v5 projectile_origin_position)
{
  if(g_current_apis._weapon_system_aspect_listener_v5.OnIncomingProjectile == g_implementation_apis._weapon_system_aspect_listener_v5.OnIncomingProjectile)
  {
    // Forward to implementation
    InterlockedIncrement(&g_active_function_count);
    g_current_apis._weapon_system_aspect_listener_v5.OnIncomingProjectile(object, projectile, distance, projectile_position, projectile_velocity, shooter, can_damage, projectile_origin_position);
    InterlockedDecrement(&g_active_function_count);
  }
  else
  {
    // Forward to unloaded placeholder
    g_unloaded_apis._weapon_system_aspect_listener_v5.OnIncomingProjectile(object, projectile, distance, projectile_position, projectile_velocity, shooter, can_damage, projectile_origin_position);
  }
}
